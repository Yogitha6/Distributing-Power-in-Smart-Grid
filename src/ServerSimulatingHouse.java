import java.io.* ;
import java.net.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class ServerSimulatingHouse {
	public int serverId;
	public int serverPort;
	public DatagramSocket server_socket;
	public HashMap<String, HouseProperties> serversInfo;
	public TransferDecision finaldecision;

	public ServerSimulatingHouse(int id)
	{
		this.serverId = id;
		this.serversInfo = new HashMap<String, HouseProperties>();
		this.finaldecision = new TransferDecision();
	}
	public void listen() throws NumberFormatException, IOException
	{
		  //System.out.println("listening");
		  byte[] server_buf = new byte[256];
	      DatagramPacket client_packet = new DatagramPacket(server_buf, server_buf.length);
		  this.server_socket.receive(client_packet);
		  String received = new String(client_packet.getData(), 0, client_packet.getLength());
		  System.out.println(received);
		  if(received.startsWith("Id"))
		  {
			  String[] info = received.split(";");
			  HouseProperties value = new HouseProperties(info[1].substring(info[1].indexOf(": ")+2),info[2].substring(info[2].indexOf(": ")+2));
			  String key = info[0].substring(info[0].indexOf(": ")+2);
			  this.serversInfo.put(key,value);
		  }
		  else if(received.startsWith("S"))
		  {
			  finaldecision.decisionsReceived = finaldecision.decisionsReceived+1;
			  if(finaldecision.decisionsReceived>2)
			  {
				  //check if this is the sender or receiver and do the corresponding action
				  String[] info = received.split(";");
				  String sourceId = info[0].substring(info[0].indexOf(": ")+2); 
				  String destinationId = info[1].substring(info[0].indexOf(": ")+2); 
				  String power = info[2].substring(info[0].indexOf(": ")+2); 
				  if(this.serverId == Integer.parseInt(sourceId))
				  {
					  System.out.println("Power - "+power+" has been transfered to "+destinationId);
				  }
				  else if(this.serverId == Integer.parseInt(destinationId))
				  {
					  System.out.println("Power - "+power+" has been received from "+sourceId);
				  }
			  }
		  }
	 }
	public void broadCastState(String type) throws IOException
	{
		byte[] sendBuffer = new byte[256];
		String houseState = "";
		if(type.equals("state"))
		{
		Scanner reader = new Scanner(System.in);
		System.out.println("Please enter the amount of power generated by this house");
		float powerGenerated = reader.nextFloat();
		System.out.println("Please enter the amount of power consumed by this house");
		float powerConsumed = reader.nextFloat(); 
		houseState = "Id: "+this.serverId+";G: "+powerGenerated+";C: "+powerConsumed;
		reader.close();
		}
		else if(type.equals("decision"))
		{
			houseState = "S: "+this.finaldecision.SourceServerId+";D: "+this.finaldecision.DestinationServerId+";P: "+this.finaldecision.PowerToTransfer;
		}
		sendBuffer = houseState.getBytes();
		InetAddress server1_address = InetAddress.getByName(Constants.SERVER1_ADDRESS);
		InetAddress server2_address = InetAddress.getByName(Constants.SERVER2_ADDRESS);
		InetAddress server3_address = InetAddress.getByName(Constants.SERVER3_ADDRESS);
		InetAddress server4_address = InetAddress.getByName(Constants.SERVER4_ADDRESS);
		InetAddress server5_address = InetAddress.getByName(Constants.SERVER5_ADDRESS);
		DatagramPacket broadcastPacket1 = new DatagramPacket(sendBuffer, sendBuffer.length, server1_address, Integer.parseInt(Constants.SERVER1_PORT));
		this.server_socket.send(broadcastPacket1);
		DatagramPacket broadcastPacket2 = new DatagramPacket(sendBuffer, sendBuffer.length, server2_address, Integer.parseInt(Constants.SERVER2_PORT));
		this.server_socket.send(broadcastPacket2);
		DatagramPacket broadcastPacket3 = new DatagramPacket(sendBuffer, sendBuffer.length, server3_address, Integer.parseInt(Constants.SERVER3_PORT));
		this.server_socket.send(broadcastPacket3);
		DatagramPacket broadcastPacket4 = new DatagramPacket(sendBuffer, sendBuffer.length, server4_address, Integer.parseInt(Constants.SERVER4_PORT));
		this.server_socket.send(broadcastPacket4);
		DatagramPacket broadcastPacket5 = new DatagramPacket(sendBuffer, sendBuffer.length, server5_address, Integer.parseInt(Constants.SERVER5_PORT));
		this.server_socket.send(broadcastPacket5);
	}
	public Float getDistance(String serverId1, String serverId2)
	{
		Float distance = null;
		//System.out.println("Getting distance from "+serverId1+" and "+serverId2);
		ArrayList<ServersDistance> distances = Constants.serverDistanceInfo.get(serverId1);
		for(ServersDistance serverInstance : distances)
		{
			//System.out.println("checking "+serverInstance.DestinationServerId+" : "+serverInstance.distanceInMiles);
			if(serverInstance.DestinationServerId.equals(serverId2))
			{
				distance = serverInstance.getDistanceInMiles();
				break;
			}
		}
		//System.out.println("Distance is "+distance);
		return distance;
	}
	
	public void updateInformation()
	{
		Iterator<Entry<String, HouseProperties>> iterator_serversInfo = this.serversInfo.entrySet().iterator();
		while (iterator_serversInfo.hasNext())
		  {
			  Map.Entry<String, HouseProperties> tuple = (Map.Entry<String, HouseProperties>) iterator_serversInfo.next();
			  if(tuple.getKey()==this.finaldecision.SourceServerId)
			  {
				  tuple.getValue().setPowerGenerated(tuple.getValue().getPowerGenerated()-finaldecision.PowerToTransfer);
			  }
			  else if(tuple.getKey()==this.finaldecision.DestinationServerId)
			  {
				  tuple.getValue().setPowerGenerated(tuple.getValue().getPowerGenerated()+finaldecision.PowerToTransfer);
			  }
		  }
	}
	public void checkServersState() throws IOException
	{
		  //System.out.println("checking server state");
		  Iterator<Entry<String, HouseProperties>> iterator_serversInfo = this.serversInfo.entrySet().iterator();
		  HashMap<String, Float> deficitServers = new HashMap<String, Float>();
		  HashMap<String, Float> excessServers = new HashMap<String, Float>();
		  if(this.serversInfo.size()>=3)
		  {
		  while (iterator_serversInfo.hasNext())
		  {
			  Map.Entry<String, HouseProperties> tuple = (Map.Entry<String, HouseProperties>) iterator_serversInfo.next();
			  String serverId = tuple.getKey();
			  HouseProperties serverInfo = tuple.getValue();
			  if(serverInfo.powerGenerated - serverInfo.powerConsumed < 0)
			  {
				  deficitServers.put(serverId, serverInfo.powerGenerated-serverInfo.powerConsumed);
			  }
			  else if(serverInfo.powerGenerated - serverInfo.powerConsumed > 0)
			  {
				  excessServers.put(serverId, serverInfo.powerGenerated-serverInfo.powerConsumed);
			  }
		  }
		  if(!deficitServers.isEmpty() && !excessServers.isEmpty())
		  {
			  Iterator<Entry<String, Float>> iterator_deficitInfo = deficitServers.entrySet().iterator();
			  Iterator<Entry<String, Float>> iterator_excessInfo = excessServers.entrySet().iterator();
			  while(iterator_deficitInfo.hasNext())
			  {
				  Map.Entry<String, Float> deficitTuple = (Map.Entry<String, Float>) iterator_deficitInfo.next();
				  while(iterator_excessInfo.hasNext())
				  {
					  Map.Entry<String, Float> excessTuple = (Map.Entry<String, Float>) iterator_excessInfo.next();
					  if(excessTuple.getValue() > deficitTuple.getValue())
					  {
						  if(finaldecision.getSourceServerId()=="")
						  {
							  finaldecision.setPowerToTransfer(excessTuple.getValue());
							  finaldecision.setSourceServerId(excessTuple.getKey());
							  finaldecision.setDestinationServerId(deficitTuple.getKey());
						  }
						  else
						  {
							  System.out.println("Getting distance between "+excessTuple.getKey()+" and "+deficitTuple.getKey()+"; and distance between "+ finaldecision.SourceServerId +" and "+ deficitTuple.getKey());
							if(getDistance(excessTuple.getKey(),deficitTuple.getKey()) < getDistance(finaldecision.getSourceServerId(), deficitTuple.getKey()))
							{
								finaldecision.setPowerToTransfer(excessTuple.getValue());
								finaldecision.setSourceServerId(excessTuple.getKey());
								finaldecision.setDestinationServerId(deficitTuple.getKey());
							}
						  }
					  }
				  }
				  //System.out.println("Final Decision from this server is to transfer "+ finaldecision.getPowerToTransfer()+" power from "+deficitTuple.getKey()+" to "+finaldecision.getServerId());
				  broadCastState("decision");
				  updateInformation();
			  }
		  }
		  else
		  {
			  if(!deficitServers.isEmpty())
			  {
				  System.out.println("Not enough power in the system");
			  }
			  else if(!excessServers.isEmpty())
			  {
				  System.out.println("Excess power in the system - No deficit - System STABLE");
			  }
		  }
		}
	}
}